package scan

import (
	"context"
	"fmt"
	"net"
	"strings"
	"sync"
	"time"

	"go.uber.org/zap"
)

// ParallelPortScanner - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤ —Å timeout 1s
type ParallelPortScanner struct {
	logger      *zap.Logger
	concurrency int
	timeout     time.Duration
}

// PortResult - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞
type PortResult struct {
	Port         int           `json:"port"`
	Protocol     string        `json:"protocol"`
	Status       string        `json:"status"`       // open, closed, filtered, error
	ResponseTime time.Duration `json:"response_time"`
	Error        string        `json:"error,omitempty"`
	Banner       string        `json:"banner,omitempty"`
}

// ScanResults - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ä—Ç–æ–≤
type ScanResults struct {
	Target        string        `json:"target"`
	TotalPorts    int           `json:"total_ports"`
	OpenPorts     int           `json:"open_ports"`
	ClosedPorts   int           `json:"closed_ports"`
	FilteredPorts int           `json:"filtered_ports"`
	TotalTime     time.Duration `json:"total_time"`
	Results       []PortResult  `json:"results"`
}

// NewParallelPortScanner —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä
func NewParallelPortScanner(logger *zap.Logger) *ParallelPortScanner {
	return &ParallelPortScanner{
		logger:      logger,
		concurrency: 100, // –í—ã—Å–æ–∫–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
		timeout:     1 * time.Second, // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π timeout
	}
}

// ScanCommonPorts - –±—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
func (pps *ParallelPortScanner) ScanCommonPorts(ctx context.Context, target string) (*ScanResults, error) {
	commonPorts := []int{
		21, 22, 23, 25, 53, 80, 110, 111, 135, 139, 143, 443, 993, 995, 1723, 3306, 3389, 5432, 5900, 8080,
	}
	
	return pps.ScanPorts(ctx, target, commonPorts)
}

// ScanBasicPorts - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è connectivity test
func (pps *ParallelPortScanner) ScanBasicPorts(ctx context.Context, target string) (*ScanResults, error) {
	basicPorts := []int{22, 53, 80, 443}
	return pps.ScanPorts(ctx, target, basicPorts)
}

// ScanPorts - –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
func (pps *ParallelPortScanner) ScanPorts(ctx context.Context, target string, ports []int) (*ScanResults, error) {
	start := time.Now()
	
	pps.logger.Info("üöÄ Starting parallel port scan", 
		zap.String("target", target),
		zap.Int("ports", len(ports)),
		zap.Int("concurrency", pps.concurrency),
		zap.Duration("timeout", pps.timeout))

	results := &ScanResults{
		Target:     target,
		TotalPorts: len(ports),
		Results:    make([]PortResult, 0, len(ports)),
	}

	// –ö–∞–Ω–∞–ª –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
	semaphore := make(chan struct{}, pps.concurrency)
	resultsChan := make(chan PortResult, len(ports))
	
	var wg sync.WaitGroup

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç–∞
	for _, port := range ports {
		wg.Add(1)
		go func(p int) {
			defer wg.Done()
			
			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
			semaphore <- struct{}{}
			defer func() { <-semaphore }()
			
			result := pps.scanSinglePort(ctx, target, p)
			resultsChan <- result
		}(port)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	go func() {
		wg.Wait()
		close(resultsChan)
	}()

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	for result := range resultsChan {
		results.Results = append(results.Results, result)
		
		switch result.Status {
		case "open":
			results.OpenPorts++
		case "closed":
			results.ClosedPorts++
		case "filtered":
			results.FilteredPorts++
		}
	}

	results.TotalTime = time.Since(start)
	
	pps.logger.Info("‚úÖ Parallel port scan completed",
		zap.Duration("total_time", results.TotalTime),
		zap.Int("open_ports", results.OpenPorts),
		zap.Int("closed_ports", results.ClosedPorts),
		zap.Int("filtered_ports", results.FilteredPorts))

	return results, nil
}

// scanSinglePort - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
func (pps *ParallelPortScanner) scanSinglePort(ctx context.Context, target string, port int) PortResult {
	start := time.Now()
	
	result := PortResult{
		Port:     port,
		Protocol: "tcp",
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å timeout
	scanCtx, cancel := context.WithTimeout(ctx, pps.timeout)
	defer cancel()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º DialContext –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è timeout
	dialer := &net.Dialer{}
	conn, err := dialer.DialContext(scanCtx, "tcp", fmt.Sprintf("%s:%d", target, port))
	
	result.ResponseTime = time.Since(start)

	if err != nil {
		result.Error = err.Error()
		
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
		if isTimeoutError(err) {
			result.Status = "filtered" // timeout = filtered
			pps.logger.Debug("Port filtered (timeout)", 
				zap.String("target", target), 
				zap.Int("port", port),
				zap.Duration("response_time", result.ResponseTime))
		} else if isConnectionRefused(err) {
			result.Status = "closed" // connection refused = closed
			pps.logger.Debug("Port closed (refused)", 
				zap.String("target", target), 
				zap.Int("port", port),
				zap.Duration("response_time", result.ResponseTime))
		} else {
			result.Status = "error" // other errors
			pps.logger.Debug("Port scan error", 
				zap.String("target", target), 
				zap.Int("port", port),
				zap.Error(err))
		}
		return result
	}

	// –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ - –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç
	defer conn.Close()
	result.Status = "open"
	
	// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å banner (–±—ã—Å—Ç—Ä–æ)
	if banner := pps.grabBanner(conn, port); banner != "" {
		result.Banner = banner
	}

	pps.logger.Debug("Port open", 
		zap.String("target", target), 
		zap.Int("port", port),
		zap.Duration("response_time", result.ResponseTime),
		zap.String("banner", result.Banner))

	return result
}

// grabBanner - –±—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ banner
func (pps *ParallelPortScanner) grabBanner(conn net.Conn, port int) string {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è banner grabbing
	conn.SetReadDeadline(time.Now().Add(500 * time.Millisecond))
	
	// –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º probe
	switch port {
	case 22:
		// SSH banner –æ–±—ã—á–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É
		buffer := make([]byte, 1024)
		n, _ := conn.Read(buffer)
		if n > 0 {
			return string(buffer[:n])
		}
	case 21:
		// FTP banner
		buffer := make([]byte, 1024)
		n, _ := conn.Read(buffer)
		if n > 0 {
			return string(buffer[:n])
		}
	case 80, 8080:
		// HTTP probe
		conn.Write([]byte("HEAD / HTTP/1.0\r\n\r\n"))
		buffer := make([]byte, 1024)
		n, _ := conn.Read(buffer)
		if n > 0 {
			return string(buffer[:n])
		}
	case 443:
		// –î–ª—è HTTPS –Ω–µ –¥–µ–ª–∞–µ–º probe –∏–∑-–∑–∞ TLS handshake
		return "HTTPS/TLS"
	}
	
	return ""
}

// isTimeoutError - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ timeout –æ—à–∏–±–∫—É
func isTimeoutError(err error) bool {
	if netErr, ok := err.(net.Error); ok {
		return netErr.Timeout()
	}
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ timeout
	errStr := err.Error()
	return strings.Contains(errStr, "timeout") || 
		   strings.Contains(errStr, "i/o timeout") ||
		   strings.Contains(errStr, "deadline exceeded")
}

// isConnectionRefused - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ connection refused
func isConnectionRefused(err error) bool {
	errStr := err.Error()
	return strings.Contains(errStr, "connection refused") ||
		   strings.Contains(errStr, "connect: connection refused")
}

// GetOpenPorts - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
func (sr *ScanResults) GetOpenPorts() []int {
	var openPorts []int
	for _, result := range sr.Results {
		if result.Status == "open" {
			openPorts = append(openPorts, result.Port)
		}
	}
	return openPorts
}

// GetClosedPorts - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤  
func (sr *ScanResults) GetClosedPorts() []int {
	var closedPorts []int
	for _, result := range sr.Results {
		if result.Status == "closed" {
			closedPorts = append(closedPorts, result.Port)
		}
	}
	return closedPorts
}

// GetFilteredPorts - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã—Ö –ø–æ—Ä—Ç–æ–≤
func (sr *ScanResults) GetFilteredPorts() []int {
	var filteredPorts []int
	for _, result := range sr.Results {
		if result.Status == "filtered" {
			filteredPorts = append(filteredPorts, result.Port)
		}
	}
	return filteredPorts
}

// Summary - –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
func (sr *ScanResults) Summary() string {
	return fmt.Sprintf("Target: %s | Total: %d | Open: %d | Closed: %d | Filtered: %d | Time: %v",
		sr.Target, sr.TotalPorts, sr.OpenPorts, sr.ClosedPorts, sr.FilteredPorts, sr.TotalTime)
}